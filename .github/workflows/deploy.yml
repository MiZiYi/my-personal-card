# 工作流名称：在 GitHub Actions 页面显示的名称，可自定义
name: Deploy Personal Tech Card

# 触发条件：当代码被推送到（push）main 分支时，启动该工作流
on:
  push:
    branches: [ main ]  # 仅监听 main 分支的 push 事件

# 定义工作流中的任务（jobs）：一个工作流可包含多个任务，这里只有一个“构建并部署”任务
jobs:
  # 任务名称：build-and-deploy（可自定义，建议见名知意）
  build-and-deploy:
    # 任务运行的环境：使用 GitHub 提供的 Ubuntu 最新版本虚拟机（免费）
    runs-on: ubuntu-latest

    # 任务的步骤（steps）：按顺序执行，每个步骤做一件具体的事
    steps:
      # 步骤1：拉取 GitHub 仓库的代码到虚拟机中
      - name: Checkout code  # 步骤名称，在 Actions 日志中显示
        uses: actions/checkout@v3  # 使用 GitHub 官方提供的“拉取代码”Action（已验证，稳定）
      
      # 步骤2：在虚拟机中安装 Python 3.10（与本地使用的版本一致，避免版本冲突）
      - name: Set up Python
        uses: actions/setup-python@v4  # 官方“安装 Python”Action
        with:
          python-version: '3.10'  # 指定 Python 版本
      
      # 步骤3：运行 Python 脚本，生成 index.html 文件（与本地运行命令完全一致）
      - name: Generate HTML file
        run: python build_page.py  # 在虚拟机的命令行中执行该命令
      
      # 步骤4：初始化 GitHub Pages 配置（告诉 GitHub 这是一个 Pages 部署任务）
      - name: Setup Pages
        uses: actions/configure-pages@v3  # 官方“配置 Pages”Action
      
      # 步骤5：将生成的文件（包含 index.html）上传为“部署产物”（供后续部署使用）
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2  # 官方“上传部署产物”Action
        with:
          path: '.'  # 上传当前目录下所有文件（因为 index.html 在根目录，且可能有其他静态资源）
      
      # 步骤6：将上传的部署产物部署到 GitHub Pages（无需手动配置密钥，官方 Action 已集成）
      - name: Deploy to GitHub Pages
        id: deployment  # 给步骤设置 ID，后续可引用该步骤的输出（这里暂用不到）
        uses: actions/deploy-pages@v2  # 官方“部署 Pages”Action